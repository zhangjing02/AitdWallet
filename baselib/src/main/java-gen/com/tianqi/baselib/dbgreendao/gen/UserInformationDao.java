package com.tianqi.baselib.dbgreendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tianqi.baselib.dao.UserInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFORMATION".
*/
public class UserInformationDao extends AbstractDao<UserInformation, Long> {

    public static final String TABLENAME = "USER_INFORMATION";

    /**
     * Properties of entity UserInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property MnemonicWord = new Property(2, String.class, "mnemonicWord", false, "MNEMONIC_WORD");
        public final static Property PasswordStr = new Property(3, String.class, "passwordStr", false, "PASSWORD_STR");
        public final static Property NoCenter = new Property(4, boolean.class, "noCenter", false, "NO_CENTER");
        public final static Property PasswordTip = new Property(5, String.class, "passwordTip", false, "PASSWORD_TIP");
        public final static Property FiatUnit = new Property(6, String.class, "fiatUnit", false, "FIAT_UNIT");
        public final static Property LanguageId = new Property(7, int.class, "languageId", false, "LANGUAGE_ID");
    }


    public UserInformationDao(DaoConfig config) {
        super(config);
    }
    
    public UserInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFORMATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"MNEMONIC_WORD\" TEXT," + // 2: mnemonicWord
                "\"PASSWORD_STR\" TEXT," + // 3: passwordStr
                "\"NO_CENTER\" INTEGER NOT NULL ," + // 4: noCenter
                "\"PASSWORD_TIP\" TEXT," + // 5: passwordTip
                "\"FIAT_UNIT\" TEXT," + // 6: fiatUnit
                "\"LANGUAGE_ID\" INTEGER NOT NULL );"); // 7: languageId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_INFORMATION_USER_ID ON \"USER_INFORMATION\"" +
                " (\"USER_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInformation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String mnemonicWord = entity.getMnemonicWord();
        if (mnemonicWord != null) {
            stmt.bindString(3, mnemonicWord);
        }
 
        String passwordStr = entity.getPasswordStr();
        if (passwordStr != null) {
            stmt.bindString(4, passwordStr);
        }
        stmt.bindLong(5, entity.getNoCenter() ? 1L: 0L);
 
        String passwordTip = entity.getPasswordTip();
        if (passwordTip != null) {
            stmt.bindString(6, passwordTip);
        }
 
        String fiatUnit = entity.getFiatUnit();
        if (fiatUnit != null) {
            stmt.bindString(7, fiatUnit);
        }
        stmt.bindLong(8, entity.getLanguageId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInformation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String mnemonicWord = entity.getMnemonicWord();
        if (mnemonicWord != null) {
            stmt.bindString(3, mnemonicWord);
        }
 
        String passwordStr = entity.getPasswordStr();
        if (passwordStr != null) {
            stmt.bindString(4, passwordStr);
        }
        stmt.bindLong(5, entity.getNoCenter() ? 1L: 0L);
 
        String passwordTip = entity.getPasswordTip();
        if (passwordTip != null) {
            stmt.bindString(6, passwordTip);
        }
 
        String fiatUnit = entity.getFiatUnit();
        if (fiatUnit != null) {
            stmt.bindString(7, fiatUnit);
        }
        stmt.bindLong(8, entity.getLanguageId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInformation readEntity(Cursor cursor, int offset) {
        UserInformation entity = new UserInformation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mnemonicWord
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passwordStr
            cursor.getShort(offset + 4) != 0, // noCenter
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // passwordTip
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fiatUnit
            cursor.getInt(offset + 7) // languageId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInformation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMnemonicWord(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPasswordStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNoCenter(cursor.getShort(offset + 4) != 0);
        entity.setPasswordTip(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFiatUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLanguageId(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInformation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInformation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInformation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
