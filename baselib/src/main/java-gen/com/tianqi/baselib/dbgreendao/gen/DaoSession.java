package com.tianqi.baselib.dbgreendao.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.tianqi.baselib.dao.CoinInfo;
import com.tianqi.baselib.dao.CoinRateInfo;
import com.tianqi.baselib.dao.ContactsInfo;
import com.tianqi.baselib.dao.TransactionRecord;
import com.tianqi.baselib.dao.UserInformation;
import com.tianqi.baselib.dao.WalletInfo;

import com.tianqi.baselib.dbgreendao.gen.CoinInfoDao;
import com.tianqi.baselib.dbgreendao.gen.CoinRateInfoDao;
import com.tianqi.baselib.dbgreendao.gen.ContactsInfoDao;
import com.tianqi.baselib.dbgreendao.gen.TransactionRecordDao;
import com.tianqi.baselib.dbgreendao.gen.UserInformationDao;
import com.tianqi.baselib.dbgreendao.gen.WalletInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig coinInfoDaoConfig;
    private final DaoConfig coinRateInfoDaoConfig;
    private final DaoConfig contactsInfoDaoConfig;
    private final DaoConfig transactionRecordDaoConfig;
    private final DaoConfig userInformationDaoConfig;
    private final DaoConfig walletInfoDaoConfig;

    private final CoinInfoDao coinInfoDao;
    private final CoinRateInfoDao coinRateInfoDao;
    private final ContactsInfoDao contactsInfoDao;
    private final TransactionRecordDao transactionRecordDao;
    private final UserInformationDao userInformationDao;
    private final WalletInfoDao walletInfoDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        coinInfoDaoConfig = daoConfigMap.get(CoinInfoDao.class).clone();
        coinInfoDaoConfig.initIdentityScope(type);

        coinRateInfoDaoConfig = daoConfigMap.get(CoinRateInfoDao.class).clone();
        coinRateInfoDaoConfig.initIdentityScope(type);

        contactsInfoDaoConfig = daoConfigMap.get(ContactsInfoDao.class).clone();
        contactsInfoDaoConfig.initIdentityScope(type);

        transactionRecordDaoConfig = daoConfigMap.get(TransactionRecordDao.class).clone();
        transactionRecordDaoConfig.initIdentityScope(type);

        userInformationDaoConfig = daoConfigMap.get(UserInformationDao.class).clone();
        userInformationDaoConfig.initIdentityScope(type);

        walletInfoDaoConfig = daoConfigMap.get(WalletInfoDao.class).clone();
        walletInfoDaoConfig.initIdentityScope(type);

        coinInfoDao = new CoinInfoDao(coinInfoDaoConfig, this);
        coinRateInfoDao = new CoinRateInfoDao(coinRateInfoDaoConfig, this);
        contactsInfoDao = new ContactsInfoDao(contactsInfoDaoConfig, this);
        transactionRecordDao = new TransactionRecordDao(transactionRecordDaoConfig, this);
        userInformationDao = new UserInformationDao(userInformationDaoConfig, this);
        walletInfoDao = new WalletInfoDao(walletInfoDaoConfig, this);

        registerDao(CoinInfo.class, coinInfoDao);
        registerDao(CoinRateInfo.class, coinRateInfoDao);
        registerDao(ContactsInfo.class, contactsInfoDao);
        registerDao(TransactionRecord.class, transactionRecordDao);
        registerDao(UserInformation.class, userInformationDao);
        registerDao(WalletInfo.class, walletInfoDao);
    }
    
    public void clear() {
        coinInfoDaoConfig.clearIdentityScope();
        coinRateInfoDaoConfig.clearIdentityScope();
        contactsInfoDaoConfig.clearIdentityScope();
        transactionRecordDaoConfig.clearIdentityScope();
        userInformationDaoConfig.clearIdentityScope();
        walletInfoDaoConfig.clearIdentityScope();
    }

    public CoinInfoDao getCoinInfoDao() {
        return coinInfoDao;
    }

    public CoinRateInfoDao getCoinRateInfoDao() {
        return coinRateInfoDao;
    }

    public ContactsInfoDao getContactsInfoDao() {
        return contactsInfoDao;
    }

    public TransactionRecordDao getTransactionRecordDao() {
        return transactionRecordDao;
    }

    public UserInformationDao getUserInformationDao() {
        return userInformationDao;
    }

    public WalletInfoDao getWalletInfoDao() {
        return walletInfoDao;
    }

}
