package com.tianqi.baselib.dbgreendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tianqi.baselib.dao.TransactionRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_RECORD".
*/
public class TransactionRecordDao extends AbstractDao<TransactionRecord, Long> {

    public static final String TABLENAME = "TRANSACTION_RECORD";

    /**
     * Properties of entity TransactionRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Txid = new Property(1, String.class, "txid", false, "TXID");
        public final static Property TransType = new Property(2, int.class, "transType", false, "TRANS_TYPE");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
        public final static Property Coin_type = new Property(4, int.class, "coin_type", false, "COIN_TYPE");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Confirmations = new Property(6, int.class, "confirmations", false, "CONFIRMATIONS");
        public final static Property Amount = new Property(7, double.class, "amount", false, "AMOUNT");
        public final static Property TimeStr = new Property(8, String.class, "timeStr", false, "TIME_STR");
        public final static Property Unit = new Property(9, String.class, "unit", false, "UNIT");
        public final static Property Coin_id = new Property(10, String.class, "coin_id", false, "COIN_ID");
        public final static Property Vout_id = new Property(11, int.class, "vout_id", false, "VOUT_ID");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
        public final static Property TargetAddress = new Property(13, String.class, "targetAddress", false, "TARGET_ADDRESS");
        public final static Property Input_id = new Property(14, String.class, "input_id", false, "INPUT_ID");
        public final static Property Input_spent = new Property(15, double.class, "input_spent", false, "INPUT_SPENT");
        public final static Property List_unspent_consume = new Property(16, String.class, "list_unspent_consume", false, "LIST_UNSPENT_CONSUME");
        public final static Property Miner_fee = new Property(17, double.class, "miner_fee", false, "MINER_FEE");
    }


    public TransactionRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TXID\" TEXT," + // 1: txid
                "\"TRANS_TYPE\" INTEGER NOT NULL ," + // 2: transType
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"COIN_TYPE\" INTEGER NOT NULL ," + // 4: coin_type
                "\"ADDRESS\" TEXT," + // 5: address
                "\"CONFIRMATIONS\" INTEGER NOT NULL ," + // 6: confirmations
                "\"AMOUNT\" REAL NOT NULL ," + // 7: amount
                "\"TIME_STR\" TEXT," + // 8: timeStr
                "\"UNIT\" TEXT," + // 9: unit
                "\"COIN_ID\" TEXT," + // 10: coin_id
                "\"VOUT_ID\" INTEGER NOT NULL ," + // 11: vout_id
                "\"REMARK\" TEXT," + // 12: remark
                "\"TARGET_ADDRESS\" TEXT," + // 13: targetAddress
                "\"INPUT_ID\" TEXT," + // 14: input_id
                "\"INPUT_SPENT\" REAL NOT NULL ," + // 15: input_spent
                "\"LIST_UNSPENT_CONSUME\" TEXT," + // 16: list_unspent_consume
                "\"MINER_FEE\" REAL NOT NULL );"); // 17: miner_fee
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_TRANSACTION_RECORD_TXID ON \"TRANSACTION_RECORD\"" +
                " (\"TXID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(2, txid);
        }
        stmt.bindLong(3, entity.getTransType());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getCoin_type());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
        stmt.bindLong(7, entity.getConfirmations());
        stmt.bindDouble(8, entity.getAmount());
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(9, timeStr);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(10, unit);
        }
 
        String coin_id = entity.getCoin_id();
        if (coin_id != null) {
            stmt.bindString(11, coin_id);
        }
        stmt.bindLong(12, entity.getVout_id());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String targetAddress = entity.getTargetAddress();
        if (targetAddress != null) {
            stmt.bindString(14, targetAddress);
        }
 
        String input_id = entity.getInput_id();
        if (input_id != null) {
            stmt.bindString(15, input_id);
        }
        stmt.bindDouble(16, entity.getInput_spent());
 
        String list_unspent_consume = entity.getList_unspent_consume();
        if (list_unspent_consume != null) {
            stmt.bindString(17, list_unspent_consume);
        }
        stmt.bindDouble(18, entity.getMiner_fee());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(2, txid);
        }
        stmt.bindLong(3, entity.getTransType());
        stmt.bindLong(4, entity.getStatus());
        stmt.bindLong(5, entity.getCoin_type());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
        stmt.bindLong(7, entity.getConfirmations());
        stmt.bindDouble(8, entity.getAmount());
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(9, timeStr);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(10, unit);
        }
 
        String coin_id = entity.getCoin_id();
        if (coin_id != null) {
            stmt.bindString(11, coin_id);
        }
        stmt.bindLong(12, entity.getVout_id());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String targetAddress = entity.getTargetAddress();
        if (targetAddress != null) {
            stmt.bindString(14, targetAddress);
        }
 
        String input_id = entity.getInput_id();
        if (input_id != null) {
            stmt.bindString(15, input_id);
        }
        stmt.bindDouble(16, entity.getInput_spent());
 
        String list_unspent_consume = entity.getList_unspent_consume();
        if (list_unspent_consume != null) {
            stmt.bindString(17, list_unspent_consume);
        }
        stmt.bindDouble(18, entity.getMiner_fee());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionRecord readEntity(Cursor cursor, int offset) {
        TransactionRecord entity = new TransactionRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // txid
            cursor.getInt(offset + 2), // transType
            cursor.getInt(offset + 3), // status
            cursor.getInt(offset + 4), // coin_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.getInt(offset + 6), // confirmations
            cursor.getDouble(offset + 7), // amount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // timeStr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // unit
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // coin_id
            cursor.getInt(offset + 11), // vout_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // targetAddress
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // input_id
            cursor.getDouble(offset + 15), // input_spent
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // list_unspent_consume
            cursor.getDouble(offset + 17) // miner_fee
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTxid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTransType(cursor.getInt(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setCoin_type(cursor.getInt(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConfirmations(cursor.getInt(offset + 6));
        entity.setAmount(cursor.getDouble(offset + 7));
        entity.setTimeStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUnit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCoin_id(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVout_id(cursor.getInt(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTargetAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInput_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInput_spent(cursor.getDouble(offset + 15));
        entity.setList_unspent_consume(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMiner_fee(cursor.getDouble(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
