package com.tianqi.baselib.dbgreendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tianqi.baselib.dao.CoinRateInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COIN_RATE_INFO".
*/
public class CoinRateInfoDao extends AbstractDao<CoinRateInfo, Long> {

    public static final String TABLENAME = "COIN_RATE_INFO";

    /**
     * Properties of entity CoinRateInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Available_supply = new Property(1, double.class, "available_supply", false, "AVAILABLE_SUPPLY");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Last_updated = new Property(3, int.class, "last_updated", false, "LAST_UPDATED");
        public final static Property Logo = new Property(4, String.class, "logo", false, "LOGO");
        public final static Property Logo_png = new Property(5, String.class, "logo_png", false, "LOGO_PNG");
        public final static Property Market_cap_cny = new Property(6, double.class, "market_cap_cny", false, "MARKET_CAP_CNY");
        public final static Property Market_cap_usd = new Property(7, double.class, "market_cap_usd", false, "MARKET_CAP_USD");
        public final static Property Max_supply = new Property(8, double.class, "max_supply", false, "MAX_SUPPLY");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Percent_change_1h = new Property(10, double.class, "percent_change_1h", false, "PERCENT_CHANGE_1H");
        public final static Property Percent_change_24h = new Property(11, double.class, "percent_change_24h", false, "PERCENT_CHANGE_24H");
        public final static Property Percent_change_7d = new Property(12, double.class, "percent_change_7d", false, "PERCENT_CHANGE_7D");
        public final static Property Price_btc = new Property(13, double.class, "price_btc", false, "PRICE_BTC");
        public final static Property Price_cny = new Property(14, double.class, "price_cny", false, "PRICE_CNY");
        public final static Property Price_usd = new Property(15, double.class, "price_usd", false, "PRICE_USD");
        public final static Property Rank = new Property(16, int.class, "rank", false, "RANK");
        public final static Property Symbol = new Property(17, String.class, "symbol", false, "SYMBOL");
        public final static Property Total_supply = new Property(18, double.class, "total_supply", false, "TOTAL_SUPPLY");
        public final static Property Volume_24h_cny = new Property(19, double.class, "volume_24h_cny", false, "VOLUME_24H_CNY");
        public final static Property Volume_24h_usd = new Property(20, double.class, "volume_24h_usd", false, "VOLUME_24H_USD");
    }


    public CoinRateInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CoinRateInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COIN_RATE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ids
                "\"AVAILABLE_SUPPLY\" REAL NOT NULL ," + // 1: available_supply
                "\"ID\" TEXT," + // 2: id
                "\"LAST_UPDATED\" INTEGER NOT NULL ," + // 3: last_updated
                "\"LOGO\" TEXT," + // 4: logo
                "\"LOGO_PNG\" TEXT," + // 5: logo_png
                "\"MARKET_CAP_CNY\" REAL NOT NULL ," + // 6: market_cap_cny
                "\"MARKET_CAP_USD\" REAL NOT NULL ," + // 7: market_cap_usd
                "\"MAX_SUPPLY\" REAL NOT NULL ," + // 8: max_supply
                "\"NAME\" TEXT," + // 9: name
                "\"PERCENT_CHANGE_1H\" REAL NOT NULL ," + // 10: percent_change_1h
                "\"PERCENT_CHANGE_24H\" REAL NOT NULL ," + // 11: percent_change_24h
                "\"PERCENT_CHANGE_7D\" REAL NOT NULL ," + // 12: percent_change_7d
                "\"PRICE_BTC\" REAL NOT NULL ," + // 13: price_btc
                "\"PRICE_CNY\" REAL NOT NULL ," + // 14: price_cny
                "\"PRICE_USD\" REAL NOT NULL ," + // 15: price_usd
                "\"RANK\" INTEGER NOT NULL ," + // 16: rank
                "\"SYMBOL\" TEXT," + // 17: symbol
                "\"TOTAL_SUPPLY\" REAL NOT NULL ," + // 18: total_supply
                "\"VOLUME_24H_CNY\" REAL NOT NULL ," + // 19: volume_24h_cny
                "\"VOLUME_24H_USD\" REAL NOT NULL );"); // 20: volume_24h_usd
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_COIN_RATE_INFO_ID ON \"COIN_RATE_INFO\"" +
                " (\"ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COIN_RATE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CoinRateInfo entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindDouble(2, entity.getAvailable_supply());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
        stmt.bindLong(4, entity.getLast_updated());
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String logo_png = entity.getLogo_png();
        if (logo_png != null) {
            stmt.bindString(6, logo_png);
        }
        stmt.bindDouble(7, entity.getMarket_cap_cny());
        stmt.bindDouble(8, entity.getMarket_cap_usd());
        stmt.bindDouble(9, entity.getMax_supply());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
        stmt.bindDouble(11, entity.getPercent_change_1h());
        stmt.bindDouble(12, entity.getPercent_change_24h());
        stmt.bindDouble(13, entity.getPercent_change_7d());
        stmt.bindDouble(14, entity.getPrice_btc());
        stmt.bindDouble(15, entity.getPrice_cny());
        stmt.bindDouble(16, entity.getPrice_usd());
        stmt.bindLong(17, entity.getRank());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(18, symbol);
        }
        stmt.bindDouble(19, entity.getTotal_supply());
        stmt.bindDouble(20, entity.getVolume_24h_cny());
        stmt.bindDouble(21, entity.getVolume_24h_usd());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CoinRateInfo entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindDouble(2, entity.getAvailable_supply());
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
        stmt.bindLong(4, entity.getLast_updated());
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String logo_png = entity.getLogo_png();
        if (logo_png != null) {
            stmt.bindString(6, logo_png);
        }
        stmt.bindDouble(7, entity.getMarket_cap_cny());
        stmt.bindDouble(8, entity.getMarket_cap_usd());
        stmt.bindDouble(9, entity.getMax_supply());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }
        stmt.bindDouble(11, entity.getPercent_change_1h());
        stmt.bindDouble(12, entity.getPercent_change_24h());
        stmt.bindDouble(13, entity.getPercent_change_7d());
        stmt.bindDouble(14, entity.getPrice_btc());
        stmt.bindDouble(15, entity.getPrice_cny());
        stmt.bindDouble(16, entity.getPrice_usd());
        stmt.bindLong(17, entity.getRank());
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(18, symbol);
        }
        stmt.bindDouble(19, entity.getTotal_supply());
        stmt.bindDouble(20, entity.getVolume_24h_cny());
        stmt.bindDouble(21, entity.getVolume_24h_usd());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CoinRateInfo readEntity(Cursor cursor, int offset) {
        CoinRateInfo entity = new CoinRateInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.getDouble(offset + 1), // available_supply
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.getInt(offset + 3), // last_updated
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // logo_png
            cursor.getDouble(offset + 6), // market_cap_cny
            cursor.getDouble(offset + 7), // market_cap_usd
            cursor.getDouble(offset + 8), // max_supply
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
            cursor.getDouble(offset + 10), // percent_change_1h
            cursor.getDouble(offset + 11), // percent_change_24h
            cursor.getDouble(offset + 12), // percent_change_7d
            cursor.getDouble(offset + 13), // price_btc
            cursor.getDouble(offset + 14), // price_cny
            cursor.getDouble(offset + 15), // price_usd
            cursor.getInt(offset + 16), // rank
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // symbol
            cursor.getDouble(offset + 18), // total_supply
            cursor.getDouble(offset + 19), // volume_24h_cny
            cursor.getDouble(offset + 20) // volume_24h_usd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CoinRateInfo entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvailable_supply(cursor.getDouble(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_updated(cursor.getInt(offset + 3));
        entity.setLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLogo_png(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMarket_cap_cny(cursor.getDouble(offset + 6));
        entity.setMarket_cap_usd(cursor.getDouble(offset + 7));
        entity.setMax_supply(cursor.getDouble(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPercent_change_1h(cursor.getDouble(offset + 10));
        entity.setPercent_change_24h(cursor.getDouble(offset + 11));
        entity.setPercent_change_7d(cursor.getDouble(offset + 12));
        entity.setPrice_btc(cursor.getDouble(offset + 13));
        entity.setPrice_cny(cursor.getDouble(offset + 14));
        entity.setPrice_usd(cursor.getDouble(offset + 15));
        entity.setRank(cursor.getInt(offset + 16));
        entity.setSymbol(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTotal_supply(cursor.getDouble(offset + 18));
        entity.setVolume_24h_cny(cursor.getDouble(offset + 19));
        entity.setVolume_24h_usd(cursor.getDouble(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CoinRateInfo entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CoinRateInfo entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CoinRateInfo entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
