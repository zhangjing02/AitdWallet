package com.tianqi.baselib.dbgreendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tianqi.baselib.dao.WalletInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLET_INFO".
*/
public class WalletInfoDao extends AbstractDao<WalletInfo, Long> {

    public static final String TABLENAME = "WALLET_INFO";

    /**
     * Properties of entity WalletInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Wallet_id = new Property(2, String.class, "wallet_id", false, "WALLET_ID");
        public final static Property WalletName = new Property(3, String.class, "walletName", false, "WALLET_NAME");
        public final static Property WalletUrl = new Property(4, String.class, "walletUrl", false, "WALLET_URL");
        public final static Property WalletBalance = new Property(5, double.class, "walletBalance", false, "WALLET_BALANCE");
        public final static Property IsHide = new Property(6, boolean.class, "isHide", false, "IS_HIDE");
        public final static Property WalletType = new Property(7, int.class, "walletType", false, "WALLET_TYPE");
        public final static Property Coin_CNYPrice = new Property(8, double.class, "coin_CNYPrice", false, "COIN__CNYPRICE");
        public final static Property Coin_USDPrice = new Property(9, double.class, "coin_USDPrice", false, "COIN__USDPRICE");
        public final static Property Resource_id = new Property(10, int.class, "resource_id", false, "RESOURCE_ID");
        public final static Property Alias_name = new Property(11, String.class, "alias_name", false, "ALIAS_NAME");
        public final static Property IsImportToCreate = new Property(12, boolean.class, "isImportToCreate", false, "IS_IMPORT_TO_CREATE");
    }


    public WalletInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WalletInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"WALLET_ID\" TEXT," + // 2: wallet_id
                "\"WALLET_NAME\" TEXT," + // 3: walletName
                "\"WALLET_URL\" TEXT," + // 4: walletUrl
                "\"WALLET_BALANCE\" REAL NOT NULL ," + // 5: walletBalance
                "\"IS_HIDE\" INTEGER NOT NULL ," + // 6: isHide
                "\"WALLET_TYPE\" INTEGER NOT NULL ," + // 7: walletType
                "\"COIN__CNYPRICE\" REAL NOT NULL ," + // 8: coin_CNYPrice
                "\"COIN__USDPRICE\" REAL NOT NULL ," + // 9: coin_USDPrice
                "\"RESOURCE_ID\" INTEGER NOT NULL ," + // 10: resource_id
                "\"ALIAS_NAME\" TEXT," + // 11: alias_name
                "\"IS_IMPORT_TO_CREATE\" INTEGER NOT NULL );"); // 12: isImportToCreate
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_WALLET_INFO_WALLET_ID ON \"WALLET_INFO\"" +
                " (\"WALLET_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLET_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WalletInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String wallet_id = entity.getWallet_id();
        if (wallet_id != null) {
            stmt.bindString(3, wallet_id);
        }
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(4, walletName);
        }
 
        String walletUrl = entity.getWalletUrl();
        if (walletUrl != null) {
            stmt.bindString(5, walletUrl);
        }
        stmt.bindDouble(6, entity.getWalletBalance());
        stmt.bindLong(7, entity.getIsHide() ? 1L: 0L);
        stmt.bindLong(8, entity.getWalletType());
        stmt.bindDouble(9, entity.getCoin_CNYPrice());
        stmt.bindDouble(10, entity.getCoin_USDPrice());
        stmt.bindLong(11, entity.getResource_id());
 
        String alias_name = entity.getAlias_name();
        if (alias_name != null) {
            stmt.bindString(12, alias_name);
        }
        stmt.bindLong(13, entity.getIsImportToCreate() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WalletInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String wallet_id = entity.getWallet_id();
        if (wallet_id != null) {
            stmt.bindString(3, wallet_id);
        }
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(4, walletName);
        }
 
        String walletUrl = entity.getWalletUrl();
        if (walletUrl != null) {
            stmt.bindString(5, walletUrl);
        }
        stmt.bindDouble(6, entity.getWalletBalance());
        stmt.bindLong(7, entity.getIsHide() ? 1L: 0L);
        stmt.bindLong(8, entity.getWalletType());
        stmt.bindDouble(9, entity.getCoin_CNYPrice());
        stmt.bindDouble(10, entity.getCoin_USDPrice());
        stmt.bindLong(11, entity.getResource_id());
 
        String alias_name = entity.getAlias_name();
        if (alias_name != null) {
            stmt.bindString(12, alias_name);
        }
        stmt.bindLong(13, entity.getIsImportToCreate() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WalletInfo readEntity(Cursor cursor, int offset) {
        WalletInfo entity = new WalletInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wallet_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // walletName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // walletUrl
            cursor.getDouble(offset + 5), // walletBalance
            cursor.getShort(offset + 6) != 0, // isHide
            cursor.getInt(offset + 7), // walletType
            cursor.getDouble(offset + 8), // coin_CNYPrice
            cursor.getDouble(offset + 9), // coin_USDPrice
            cursor.getInt(offset + 10), // resource_id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // alias_name
            cursor.getShort(offset + 12) != 0 // isImportToCreate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WalletInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWallet_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWalletName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWalletUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWalletBalance(cursor.getDouble(offset + 5));
        entity.setIsHide(cursor.getShort(offset + 6) != 0);
        entity.setWalletType(cursor.getInt(offset + 7));
        entity.setCoin_CNYPrice(cursor.getDouble(offset + 8));
        entity.setCoin_USDPrice(cursor.getDouble(offset + 9));
        entity.setResource_id(cursor.getInt(offset + 10));
        entity.setAlias_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsImportToCreate(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WalletInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WalletInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WalletInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
